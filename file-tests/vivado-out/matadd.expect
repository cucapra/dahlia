#include <ap_int.h>
extern "C" {
  void kernel(float a_int[32][32], float b_int[32][32], float c_int[32][32]) {
    #pragma HLS INTERFACE m_axi port=a_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=a_int bundle=control
    #pragma HLS INTERFACE m_axi port=b_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=b_int bundle=control
    #pragma HLS INTERFACE m_axi port=c_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=c_int bundle=control
    #pragma HLS INTERFACE s_axilite port=return bundle=control
    float a[32][32];
    #pragma HLS resource variable=a core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=a cyclic factor=32 dim=2
    float b[32][32];
    #pragma HLS resource variable=b core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=b cyclic factor=32 dim=2
    float c[32][32];
    #pragma HLS resource variable=c core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=c cyclic factor=32 dim=2
    
    
    
    {
      for(int i = 0; i < 32; i++) {
        #pragma HLS UNROLL factor=1 skip_exit_check
        #pragma HLS LOOP_FLATTEN off
        for(int j = 0; j < 32; j++) {
          #pragma HLS UNROLL factor=1 skip_exit_check
          #pragma HLS LOOP_FLATTEN off
          a[i][j] = a_int[i][j];
          b[i][j] = b_int[i][j];
          c[i][j] = c_int[i][j];
        }
      }
      //---
      for(int i = 0; i < 32; i++) {
        #pragma HLS UNROLL factor=1 skip_exit_check
        #pragma HLS LOOP_FLATTEN off
        for(int j = 0; j < 32; j++) {
          #pragma HLS UNROLL factor=32 skip_exit_check
          #pragma HLS LOOP_FLATTEN off
          c[i][j] = (a[i][j] + b[i][j]);
        }
      }
    }
  }
}
