#include <ap_int.h>
extern "C" {
  void kernel(ap_int<32> M_int[6][8], ap_int<32> V_int[8], ap_int<32> R_int[6]) {
    #pragma HLS INTERFACE m_axi port=M_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=M_int bundle=control
    #pragma HLS INTERFACE m_axi port=V_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=V_int bundle=control
    #pragma HLS INTERFACE m_axi port=R_int offset=slave bundle=gmem
    #pragma HLS INTERFACE s_axilite port=R_int bundle=control
    #pragma HLS INTERFACE s_axilite port=return bundle=control
    ap_int<32> M[6][8];
    #pragma HLS resource variable=M core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=M cyclic factor=3 dim=1
    #pragma HLS ARRAY_PARTITION variable=M cyclic factor=4 dim=2
    ap_int<32> V[8];
    #pragma HLS resource variable=V core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=V cyclic factor=4 dim=1
    ap_int<32> R[6];
    #pragma HLS resource variable=R core=RAM_1P_BRAM
    #pragma HLS ARRAY_PARTITION variable=R cyclic factor=3 dim=1
    
    
    
    {
      for(int i = 0; i < 6; i++) {
        #pragma HLS UNROLL factor=1 skip_exit_check
        #pragma HLS LOOP_FLATTEN off
        for(int j = 0; j < 8; j++) {
          #pragma HLS UNROLL factor=1 skip_exit_check
          #pragma HLS LOOP_FLATTEN off
          M[i][j] = M_int[i][j];
        }
        R[i] = R_int[i];
      }
      for(int i = 0; i < 8; i++) {
        #pragma HLS UNROLL factor=1 skip_exit_check
        #pragma HLS LOOP_FLATTEN off
        V[i] = V_int[i];
      }
      //---
      for(int i = 0; i < 6; i++) {
        #pragma HLS UNROLL factor=3 skip_exit_check
        #pragma HLS LOOP_FLATTEN off
        for(int j = 0; j < 8; j++) {
          #pragma HLS UNROLL factor=4 skip_exit_check
          #pragma HLS LOOP_FLATTEN off
          ap_int<32> rs = (M[i][j] * V[j]);
          // combiner:
          R[i] += rs;
        }
      }
    }
  }
}
