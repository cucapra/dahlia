import "primitives/std.lib";
component main() -> () {
  cells {
    bin_read0_0 = std_reg(2);
    div0 = fixed_p_std_sdiv(2,1,1);
    fpconst0 = fixed_p_std_const(2,1,1,1,0);
    fpconst1 = fixed_p_std_const(2,1,1,2,0);
    slice0 = std_slice(2,2);
    slice1 = std_slice(2,2);
    slice2 = std_slice(2,2);
    slice3 = std_slice(2,2);
    x_0 = std_reg(2);
    y_0 = std_reg(2);
    z_0 = std_reg(2);
  }
  wires {
    group let0<"static"=1> {
      x_0.in = slice0.out;
      x_0.write_en = 1'd1;
      let0[done] = x_0.done;
      slice0.in = fpconst0.out;
    }
    group let1<"static"=1> {
      y_0.in = slice1.out;
      y_0.write_en = 1'd1;
      let1[done] = y_0.done;
      slice1.in = fpconst1.out;
    }
    group let2<"static"=1> {
      bin_read0_0.in = slice2.out;
      bin_read0_0.write_en = 1'd1;
      let2[done] = bin_read0_0.done;
      slice2.in = div0.out;
      div0.left = x_0.out;
      div0.right = y_0.out;
    }
    group let3<"static"=1> {
      z_0.in = slice3.out;
      z_0.write_en = 1'd1;
      let3[done] = z_0.done;
      slice3.in = bin_read0_0.out;
    }
  }
  control {
    seq {
      par {
        let0;
        let1;
      }
      let2;
      let3;
    }
  }
}
