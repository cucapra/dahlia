import "primitives/std.lib";
component mem_copy(dest_read_data: 32, dest_done: 1, src_read_data: 32, src_done: 1) -> (dest_write_data: 32, dest_write_en: 1, dest_addr0: 1, src_write_data: 32, src_write_en: 1, src_addr0: 1) {
  cells {
    const0 = std_const(1,0);
    zero0 = std_reg(1);
  }
  wires {
    group let0<"static"=1> {
      zero0.in = const0.out;
      zero0.write_en = 1'd1;
      let0[done] = zero0.done;
    }
    group upd0<"static"=1> {
      dest_addr0 = zero0.out;
      dest_write_en = 1'd1;
      src_addr0 = zero0.out;
      dest_write_data = 1'd1 ? src_read_data;
      upd0[done] = dest_done ? 1'd1;
    }
  }
  control {
    par {
      let0;
      upd0;
    }
  }
}
component main() -> () {
  cells {
    @external(1) d = std_mem_d1(32,1,1);
    mem_copy0 = mem_copy();
    @external(1) s = std_mem_d1(32,1,1);
  }
  wires {
  }
  control {
    seq {
      invoke mem_copy0(dest_read_data=d.read_data, dest_done=d.done, src_read_data=s.read_data, src_done=s.done)(dest_write_data=d.write_data, dest_write_en=d.write_en, dest_addr0=d.addr0, src_write_data=s.write_data, src_write_en=s.write_en, src_addr0=s.addr0);
    }
  }
}
