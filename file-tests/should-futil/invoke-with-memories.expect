import "primitives/core.futil";
import "primitives/binary_operators.futil";
component mem_copy() -> () {
  cells {
    ref dest0 = std_mem_d1(32,1,1);
    ref src0 = std_mem_d1(32,1,1);
    const0 = std_const(1,0);
    src_read0_0 = std_reg(32);
    zero_0 = std_reg(1);
  }
  wires {
    group let0<"static"=1> {
      zero_0.in = const0.out;
      zero_0.write_en = 1'd1;
      let0[done] = zero_0.done;
    }
    group upd0<"static"=1> {
      src_read0_0.write_en = 1'd1;
      src0.addr0 = zero_0.out;
      src_read0_0.in = src0.read_data;
      upd0[done] = src_read0_0.done;
    }
    group upd1<"static"=1> {
      dest0.addr0 = zero_0.out;
      dest0.write_en = 1'd1;
      dest0.write_data = src_read0_0.out;
      upd1[done] = dest0.done;
    }
  }
  control {
    seq {
      let0;
      upd0;
      upd1;
    }
  }
}
component main() -> () {
  cells {
    @external(1) d0 = std_mem_d1(32,1,1);
    mem_copy0 = mem_copy();
    @external(1) s0 = std_mem_d1(32,1,1);
  }
  wires {
  }
  control {
    seq {
      invoke mem_copy0[dest0=d0, src0=s0]()();
    }
  }
}
