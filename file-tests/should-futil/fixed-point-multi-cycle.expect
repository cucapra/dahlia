import "primitives/std.lib";
component main() -> () {
  cells {
    a_0 = std_reg(2);
    b_0 = std_reg(2);
    bin_read0_0 = std_reg(2);
    bin_read1_0 = std_reg(2);
    bin_read2_0 = std_reg(1);
    bin_read3_0 = std_reg(1);
    c_0 = std_reg(1);
    const0 = std_const(1,1);
    const1 = std_const(1,1);
    const2 = std_const(1,1);
    const3 = std_const(1,1);
    d_0 = std_reg(1);
    fp_const0 = std_const(2,2);
    fp_const1 = std_const(2,2);
    fp_const2 = std_const(2,2);
    fp_const3 = std_const(2,2);
    mult_pipe0 = std_fp_smult_pipe(2,1,1);
    mult_pipe1 = std_fp_mult_pipe(2,1,1);
    mult_pipe2 = std_mult_pipe(1);
    mult_pipe3 = std_smult_pipe(1);
    slice0 = std_slice(2,2);
    slice1 = std_slice(2,2);
    slice2 = std_slice(2,2);
    slice3 = std_slice(2,2);
  }
  wires {
    group let0<"static"=1> {
      bin_read0_0.in = slice0.out;
      bin_read0_0.write_en = 1'd1;
      let0[done] = bin_read0_0.done;
      slice0.in = mult_pipe0.out;
      mult_pipe0.left = fp_const0.out;
      mult_pipe0.right = fp_const1.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let1<"static"=1> {
      a_0.in = slice1.out;
      a_0.write_en = 1'd1;
      let1[done] = a_0.done;
      slice1.in = bin_read0_0.out;
    }
    group let2<"static"=1> {
      bin_read1_0.in = slice2.out;
      bin_read1_0.write_en = 1'd1;
      let2[done] = bin_read1_0.done;
      slice2.in = mult_pipe1.out;
      mult_pipe1.left = fp_const2.out;
      mult_pipe1.right = fp_const3.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let3<"static"=1> {
      b_0.in = slice3.out;
      b_0.write_en = 1'd1;
      let3[done] = b_0.done;
      slice3.in = bin_read1_0.out;
    }
    group let4<"static"=4> {
      bin_read2_0.in = mult_pipe2.out;
      bin_read2_0.write_en = mult_pipe2.done;
      let4[done] = bin_read2_0.done;
      mult_pipe2.left = const0.out;
      mult_pipe2.right = const1.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
    }
    group let5<"static"=1> {
      c_0.in = bin_read2_0.out;
      c_0.write_en = 1'd1;
      let5[done] = c_0.done;
    }
    group let6<"static"=4> {
      bin_read3_0.in = mult_pipe3.out;
      bin_read3_0.write_en = mult_pipe3.done;
      let6[done] = bin_read3_0.done;
      mult_pipe3.left = const2.out;
      mult_pipe3.right = const3.out;
      mult_pipe3.go = !mult_pipe3.done ? 1'd1;
    }
    group let7<"static"=1> {
      d_0.in = bin_read3_0.out;
      d_0.write_en = 1'd1;
      let7[done] = d_0.done;
    }
  }
  control {
    par {
      seq {
        let0;
        let1;
      }
      seq {
        let2;
        let3;
      }
      seq {
        let4;
        let5;
      }
      seq {
        let6;
        let7;
      }
    }
  }
}
