import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    add0 = std_add(4);
    add1 = std_add(4);
    add2 = std_add(4);
    const0 = std_const(4,0);
    const1 = std_const(4,0);
    const2 = std_const(4,0);
    const3 = std_const(4,1);
    const4 = std_const(4,1);
    i0 = std_reg(4);
    j0 = std_reg(4);
    x_0 = std_reg(4);
  }
  wires {
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      x_0.in = const1.out;
      x_0.write_en = 1'd1;
      let1[done] = x_0.done;
    }
    group let2<"promotable"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let2[done] = j0.done;
    }
    group upd0<"promotable"=1> {
      x_0.write_en = 1'd1;
      add0.left = x_0.out;
      add0.right = j0.out;
      x_0.in = add0.out;
      upd0[done] = x_0.done;
    }
    group upd1<"promotable"=1> {
      j0.write_en = 1'd1;
      add1.left = j0.out;
      add1.right = const3.out;
      j0.in = add1.out;
      upd1[done] = j0.done;
    }
    group upd2<"promotable"=1> {
      i0.write_en = 1'd1;
      add2.left = i0.out;
      add2.right = const4.out;
      i0.in = add2.out;
      upd2[done] = i0.done;
    }
  }
  control {
    seq {
      @pos{0} let0;
      repeat 10 {
        seq {
          @pos{1} let1;
          @pos{2} let2;
          repeat 10 {
            seq {
              @pos{3} upd0;
              @pos{2} upd1;
            }
          }
          @pos{0} upd2;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..10) {
  1:   let x: ubit<4> = 0;
  2:   for (let j: ubit<4> = 0..10) {
  3:     x += j;
}#
