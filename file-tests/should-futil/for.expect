import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) A0 = std_mem_d1(32,10,4);
    A_read0_0 = std_reg(32);
    @external(1) B0 = std_mem_d1(32,10,4);
    add0 = std_sadd(32);
    add1 = std_add(4);
    const0 = std_const(4,0);
    const1 = std_const(4,9);
    const2 = std_const(32,1);
    const3 = std_const(4,1);
    i0 = std_reg(4);
    le0 = std_le(4);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group upd0<"static"=1> {
      A_read0_0.write_en = 1'd1;
      A0.addr0 = i0.out;
      A_read0_0.in = A0.read_data;
      upd0[done] = A_read0_0.done;
    }
    group upd1<"static"=1> {
      B0.addr0 = i0.out;
      B0.write_en = 1'd1;
      add0.left = A_read0_0.out;
      add0.right = const2.out;
      B0.write_data = add0.out;
      upd1[done] = B0.done;
    }
    group upd2<"static"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const3.out;
      i0.in = add1.out;
      upd2[done] = i0.done;
    }
  }
  control {
    seq {
      let0;
      @bound(10) while le0.out with cond0 {
        seq {
          upd0;
          upd1;
          upd2;
        }
      }
    }
  }
}
