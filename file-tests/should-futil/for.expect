import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @pos{0} @external(1) A = seq_mem_d1(32,10,4);
    @pos{1} A_read0_0 = std_reg(32);
    @pos{2} @external(1) B = seq_mem_d1(32,10,4);
    add0 = std_sadd(32);
    add1 = std_add(4);
    const0 = std_const(4,0);
    const1 = std_const(32,1);
    const2 = std_const(4,1);
    @pos{3} i0 = std_reg(4);
  }
  wires {
    group let0<"promotable"=1, "pos"={3}> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=2, "pos"={1}> {
      A_read0_0.in = A.read_data;
      A_read0_0.write_en = A.done;
      let1[done] = A_read0_0.done;
      A.content_en = 1'd1;
      A.addr0 = i0.out;
    }
    group upd0<"promotable"=1, "pos"={1}> {
      B.content_en = 1'd1;
      B.addr0 = i0.out;
      B.write_en = 1'd1;
      add0.left = A_read0_0.out;
      add0.right = const1.out;
      B.write_data = add0.out;
      upd0[done] = B.done;
    }
    group upd1<"promotable"=1, "pos"={3}> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const2.out;
      i0.in = add1.out;
      upd1[done] = i0.done;
    }
  }
  control {
    @pos{3} seq {
      @pos{3} let0;
      @pos{3} repeat 10 {
        @pos{3} seq {
          @pos{1} let1;
          @pos{1} upd0;
          @pos{3} upd1;
        }
      }
    }
  }
}
sourceinfo #{
  FILES
  0: file-tests/should-futil/for.fuse
  POSITIONS
  0: 0 1
  1: 0 5
  2: 0 2
  3: 0 4
}#
