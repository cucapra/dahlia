import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component foo(a: 32) -> (@stable(1) out: 32) {
  cells {
    temp_0 = std_reg(32);
  }
  wires {
    group let3<"static"=1> {
      temp_0.in = a;
      temp_0.write_en = 1'd1;
      let3[done] = temp_0.done;
    }
    out = temp_0.out;
  }
  control {
    let3;
  }
}
component main() -> () {
  cells {
    b_0 = std_reg(32);
    c_0 = std_reg(32);
    const0 = std_const(32,1);
    d_0 = std_reg(32);
    foo0 = foo();
    sqrt0 = sqrt(32);
  }
  wires {
    group let0<"static"=1> {
      b_0.in = const0.out;
      b_0.write_en = 1'd1;
      let0[done] = b_0.done;
    }
    group let1 {
      c_0.in = foo0.out;
      c_0.write_en = 1'd1;
      let1[done] = c_0.done;
    }
    group let2 {
      d_0.in = sqrt0.out;
      d_0.write_en = 1'd1;
      let2[done] = d_0.done;
    }
  }
  control {
    seq {
      let0;
      invoke foo0(a=b_0.out)();
      let1;
      invoke sqrt0(in=c_0.out)();
      let2;
    }
  }
}
