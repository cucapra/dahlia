#include "parser.cpp"
/***************** Parse helpers  ******************/
/***************************************************/
void kernel(vector<int> a, vector<int> result, vector<int> filter) {
  
  
  
  for(int j = 0; j < 4; j++) {
    for(int i = 0; i < 3; i++) {
      int x = (filter[i] * a[(((i * 2) + ((j >> 1) * 6)) + (j & 1))]);
      // combiner:
      result[j] += x;
    }
  }
  json_t __;
  __["a"] = a;
  __["result"] = result;
  __["filter"] = filter;
  std::cout << __.dump(2) << std::endl;
}
int main(int argc, char** argv) {
  using namespace flattening;
  auto v = parse_data(argc, argv);;
  auto a = get_arg<n_dim_vec_t<int, 1>>("a", "bit<32>[]", v);
  auto result = get_arg<n_dim_vec_t<int, 1>>("result", "bit<32>[]", v);
  auto filter = get_arg<n_dim_vec_t<int, 1>>("filter", "bit<32>[]", v);
  kernel(a, result, filter);
  return 0;
}
