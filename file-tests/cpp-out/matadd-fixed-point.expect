#include "parser.cpp"
/***************** Parse helpers  ******************/
/***************************************************/
void kernel(vector<vector<double>> &a0_0, vector<vector<double>> &b0_0, vector<vector<double>> &result0_0) {
  
  for(int i = 0; i < 2; i++) {
    for(int j = 0; j < 2; j++) {
      result0_0[i][j] = (a0_0[i][j] + b0_0[i][j]);
    }
  }
  json_t __;
  __["a0_0"] = a0_0;
  __["b0_0"] = b0_0;
  __["result0_0"] = result0_0;
  std::cout << __.dump(2) << std::endl;
}
int main(int argc, char** argv) {
  using namespace flattening;
  auto v = parse_data(argc, argv);;
  auto a0_0 = get_arg<n_dim_vec_t<double, 2>>("a0_0", "ufix<16,8>[][]", v);
  auto b0_0 = get_arg<n_dim_vec_t<double, 2>>("b0_0", "ufix<16,8>[][]", v);
  auto result0_0 = get_arg<n_dim_vec_t<double, 2>>("result0_0", "ufix<16,8>[][]", v);
  kernel(a0_0, b0_0, result0_0);
  return 0;
}
