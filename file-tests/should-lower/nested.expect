#include "parser.cpp"
/***************** Parse helpers  ******************/
/***************************************************/
void kernel(vector<float> &A0, vector<float> &A1, vector<vector<float>> &B0_0, vector<vector<float>> &B0_1, vector<vector<float>> &B1_0, vector<vector<float>> &B1_1) {
  
  float R0[4];
  float R1[4];
  float inp_;
  {
    int i = (int)0;
    //---
    while((i <= (int)3)) {
      {
        int j = (int)0;
        //---
        while((j <= (int)3)) {
          float tmp_0_0;
          float tmp_1_0;
          float tmp_0_1;
          float tmp_1_1;
          tmp_0_0 = B0_0[(unsigned int)i][(unsigned int)j];
          tmp_1_0 = B1_0[(unsigned int)i][(unsigned int)j];
          tmp_0_1 = B0_1[(unsigned int)i][(unsigned int)j];
          tmp_1_1 = B1_1[(unsigned int)i][(unsigned int)j];
          //---
          if ((inp_ > 0.2)) {
            float A_read0_0_0;
            float A_read0_1_0;
            float A_read0_0_1;
            float A_read0_1_1;
            A_read0_0_0 = A0[(unsigned int)i];
            A_read0_1_0 = A1[(unsigned int)i];
            A_read0_0_1 = A0[(unsigned int)i];
            A_read0_1_1 = A1[(unsigned int)i];
            //---
            B0_0[(unsigned int)i][(unsigned int)j] = (tmp_0_0 + A_read0_0_0);
            B1_0[(unsigned int)i][(unsigned int)j] = (tmp_1_0 + A_read0_1_0);
            B0_1[(unsigned int)i][(unsigned int)j] = (tmp_0_1 + A_read0_0_1);
            B1_1[(unsigned int)i][(unsigned int)j] = (tmp_1_1 + A_read0_1_1);
          }
          //---
          R1[(unsigned int)i] += (tmp_1_0 + tmp_1_1);
          R0[(unsigned int)i] += (tmp_0_0 + tmp_0_1);
          //---
          j = (j + (int)1);
        }
      }
      //---
      i = (i + (int)1);
    }
  }
  json_t __;
  __["A0"] = A0;
  __["A1"] = A1;
  __["B0_0"] = B0_0;
  __["B0_1"] = B0_1;
  __["B1_0"] = B1_0;
  __["B1_1"] = B1_1;
  std::cout << __.dump(2) << std::endl;
}
int main(int argc, char** argv) {
  using namespace flattening;
  auto v = parse_data(argc, argv);;
  auto A0 = get_arg<n_dim_vec_t<float, 1>>("A0", "float[]", v);
  auto A1 = get_arg<n_dim_vec_t<float, 1>>("A1", "float[]", v);
  auto B0_0 = get_arg<n_dim_vec_t<float, 2>>("B0_0", "float[][]", v);
  auto B0_1 = get_arg<n_dim_vec_t<float, 2>>("B0_1", "float[][]", v);
  auto B1_0 = get_arg<n_dim_vec_t<float, 2>>("B1_0", "float[][]", v);
  auto B1_1 = get_arg<n_dim_vec_t<float, 2>>("B1_1", "float[][]", v);
  kernel(A0, A1, B0_0, B0_1, B1_0, B1_1);
  return 0;
}
