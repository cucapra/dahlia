#include "parser.cpp"
/***************** Parse helpers  ******************/
/***************************************************/
void kernel(vector<vector<float>> A0_0, vector<vector<float>> A0_1, vector<vector<float>> A1_0, vector<vector<float>> A1_1, vector<vector<float>> B0_0, vector<vector<float>> B0_1, vector<vector<float>> B1_0, vector<vector<float>> B1_1, vector<vector<float>> C0_0, vector<vector<float>> C0_1, vector<vector<float>> C1_0, vector<vector<float>> C1_1) {
  
  {
    int i = (int)0;
    //---
    while((i <= (int)1)) {
      {
        int j = (int)0;
        //---
        while((j <= (int)1)) {
          {
            int k = (int)0;
            //---
            while((k <= (int)1)) {
              float A_read0_0_0_0;
              float A_read0_1_0_0;
              float A_read0_0_1_0;
              float A_read0_1_1_0;
              float A_read0_0_0_1;
              float A_read0_1_0_1;
              float A_read0_0_1_1;
              float A_read0_1_1_1;
              A_read0_0_0_0 = A0_0[(unsigned int)i][(unsigned int)k];
              A_read0_1_0_0 = A1_0[(unsigned int)i][(unsigned int)k];
              A_read0_0_1_0 = A0_0[(unsigned int)i][(unsigned int)k];
              A_read0_1_1_0 = A1_0[(unsigned int)i][(unsigned int)k];
              A_read0_0_0_1 = A0_1[(unsigned int)i][(unsigned int)k];
              A_read0_1_0_1 = A1_1[(unsigned int)i][(unsigned int)k];
              A_read0_0_1_1 = A0_1[(unsigned int)i][(unsigned int)k];
              A_read0_1_1_1 = A1_1[(unsigned int)i][(unsigned int)k];
              //---
              float B_read0_0_0_0;
              float B_read0_1_0_0;
              float B_read0_0_1_0;
              float B_read0_1_1_0;
              float B_read0_0_0_1;
              float B_read0_1_0_1;
              float B_read0_0_1_1;
              float B_read0_1_1_1;
              B_read0_0_0_0 = B0_0[(unsigned int)k][(unsigned int)j];
              B_read0_1_0_0 = B0_0[(unsigned int)k][(unsigned int)j];
              B_read0_0_1_0 = B0_1[(unsigned int)k][(unsigned int)j];
              B_read0_1_1_0 = B0_1[(unsigned int)k][(unsigned int)j];
              B_read0_0_0_1 = B1_0[(unsigned int)k][(unsigned int)j];
              B_read0_1_0_1 = B1_0[(unsigned int)k][(unsigned int)j];
              B_read0_0_1_1 = B1_1[(unsigned int)k][(unsigned int)j];
              B_read0_1_1_1 = B1_1[(unsigned int)k][(unsigned int)j];
              //---
              float bin_read0_ = (A_read0_0_0_0 * B_read0_0_0_0);
              //---
              float x_0_0_0 = bin_read0_;
              float bin_read1_ = (A_read0_1_0_0 * B_read0_1_0_0);
              //---
              float x_1_0_0 = bin_read1_;
              float bin_read2_ = (A_read0_0_1_0 * B_read0_0_1_0);
              //---
              float x_0_1_0 = bin_read2_;
              float bin_read3_ = (A_read0_1_1_0 * B_read0_1_1_0);
              //---
              float x_1_1_0 = bin_read3_;
              float bin_read4_ = (A_read0_0_0_1 * B_read0_0_0_1);
              //---
              float x_0_0_1 = bin_read4_;
              float bin_read5_ = (A_read0_1_0_1 * B_read0_1_0_1);
              //---
              float x_1_0_1 = bin_read5_;
              float bin_read6_ = (A_read0_0_1_1 * B_read0_0_1_1);
              //---
              float x_0_1_1 = bin_read6_;
              float bin_read7_ = (A_read0_1_1_1 * B_read0_1_1_1);
              //---
              float x_1_1_1 = bin_read7_;
              //---
              C0_0[(unsigned int)i][(unsigned int)j] += (x_0_0_0 + x_0_0_1);
              C1_1[(unsigned int)i][(unsigned int)j] += (x_1_1_0 + x_1_1_1);
              C0_1[(unsigned int)i][(unsigned int)j] += (x_0_1_0 + x_0_1_1);
              C1_0[(unsigned int)i][(unsigned int)j] += (x_1_0_0 + x_1_0_1);
              //---
              k = (k + (int)1);
            }
          }
          //---
          j = (j + (int)1);
        }
      }
      //---
      i = (i + (int)1);
    }
  }
  json_t __;
  __["A0_0"] = A0_0;
  __["A0_1"] = A0_1;
  __["A1_0"] = A1_0;
  __["A1_1"] = A1_1;
  __["B0_0"] = B0_0;
  __["B0_1"] = B0_1;
  __["B1_0"] = B1_0;
  __["B1_1"] = B1_1;
  __["C0_0"] = C0_0;
  __["C0_1"] = C0_1;
  __["C1_0"] = C1_0;
  __["C1_1"] = C1_1;
  std::cout << __.dump(2) << std::endl;
}
int main(int argc, char** argv) {
  using namespace flattening;
  auto v = parse_data(argc, argv);;
  auto A0_0 = get_arg<n_dim_vec_t<float, 2>>("A0_0", "float[][]", v);
  auto A0_1 = get_arg<n_dim_vec_t<float, 2>>("A0_1", "float[][]", v);
  auto A1_0 = get_arg<n_dim_vec_t<float, 2>>("A1_0", "float[][]", v);
  auto A1_1 = get_arg<n_dim_vec_t<float, 2>>("A1_1", "float[][]", v);
  auto B0_0 = get_arg<n_dim_vec_t<float, 2>>("B0_0", "float[][]", v);
  auto B0_1 = get_arg<n_dim_vec_t<float, 2>>("B0_1", "float[][]", v);
  auto B1_0 = get_arg<n_dim_vec_t<float, 2>>("B1_0", "float[][]", v);
  auto B1_1 = get_arg<n_dim_vec_t<float, 2>>("B1_1", "float[][]", v);
  auto C0_0 = get_arg<n_dim_vec_t<float, 2>>("C0_0", "float[][]", v);
  auto C0_1 = get_arg<n_dim_vec_t<float, 2>>("C0_1", "float[][]", v);
  auto C1_0 = get_arg<n_dim_vec_t<float, 2>>("C1_0", "float[][]", v);
  auto C1_1 = get_arg<n_dim_vec_t<float, 2>>("C1_1", "float[][]", v);
  kernel(A0_0, A0_1, A1_0, A1_1, B0_0, B0_1, B1_0, B1_1, C0_0, C0_1, C1_0, C1_1);
  return 0;
}
