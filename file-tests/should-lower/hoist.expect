#include "parser.cpp"
/***************** Parse helpers  ******************/
/***************************************************/
void kernel(vector<int> &a0, vector<int> &b0) {
  
  int b_read0_;
  b_read0_ = b0[(unsigned int)0];
  //---
  int x_;
  x_ = a0[(unsigned int)b_read0_];
  //---
  int a_read0_;
  a_read0_ = a0[(unsigned int)0];
  //---
  int y_ = ((int)10 + a_read0_);
  //---
  int bin_read0_ = (x_ * (int)10);
  //---
  int bin_read1_ = (y_ * (int)20);
  //---
  int bin_read2_ = (bin_read0_ / (bin_read1_ - (int)15));
  //---
  int z_ = bin_read2_;
  int w_;
  int bin_read3_ = ((int)10 * (int)12);
  //---
  w_ = b0[(unsigned int)bin_read3_];
  int bin_read4_ = (((int)0 - (int)1) * (int)1);
  //---
  int bin_read5_ = ((int)2 * (int)2);
  //---
  int bin_read6_ = (bin_read5_ * (int)2);
  //---
  int bin_read7_ = ((int)1 * (int)1);
  //---
  int bin_read8_ = ((int)1 * (int)2);
  //---
  unsigned int k_ = (unsigned int)(((bin_read4_ + bin_read6_) - bin_read7_) - bin_read8_);
  json_t __;
  __["a0"] = a0;
  __["b0"] = b0;
  std::cout << __.dump(2) << std::endl;
}
int main(int argc, char** argv) {
  using namespace flattening;
  auto v = parse_data(argc, argv);;
  auto a0 = get_arg<n_dim_vec_t<int, 1>>("a0", "bit<32>[]", v);
  auto b0 = get_arg<n_dim_vec_t<int, 1>>("b0", "bit<32>[]", v);
  kernel(a0, b0);
  return 0;
}
