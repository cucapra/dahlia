decl force_x: bit<32>[50];
decl force_y: bit<32>[50];
decl force_z: bit<32>[50];
decl position_x: bit<32>[50];
decl position_y: bit<32>[50];
decl position_z: bit<32>[50];
decl nl: bit<32>[200];

let delx = 0;
let dely = 0;
let delz = 0;
let r2inv = 0;

let r6inv = 0;
let potential = 0;
let force = 0;

let jx = 0;
let jy = 0;
let jz = 0;

let ix = 0;
let iy = 0;
let iz = 0;

let fx = 0;
let fy = 0;
let fz = 0;

let j_idx = 0;

let lj1 = 1;
let lj2 = 2;

for (let i = 0..50) {
  ix := position_x[i];
  ---
  iy := position_y[i];
  ---
  iz := position_z[i];
  ---

  fx := 0;
  fy := 0;
  fz := 0;

  for (let j = 0..4) {
    j_idx := nl[i * 4 + j];

    jx := position_x[j_idx];
    ---
    jy := position_y[j_idx];
    ---
    jz := position_z[j_idx];
    ---

    delx := ix - jx;
    dely := iy - jy;
    delz := iz - jz;

    r2inv := 1 / (delx * delx + dely * dely + delz * delz);
    r6inv := r2inv * r2inv * r2inv;
    potential := r6inv * (lj1 * r6inv - lj2);

    force := r2inv * potential;
    fx := fx + delx * force;
    fy := fy + dely * force;
    fz := fz + delz * force;
  };

  force_x[i] := fx;
  force_y[i] := fy;
  force_z[i] := fz;
}
