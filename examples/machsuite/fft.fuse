decl real: bit<32>[32];
decl img: bit<32>[32];
decl real_twid: bit<32>[16];
decl img_twid: bit<32>[16];

let even = 0;
let span = 32 >> 1;
let log = 0;
let rootindex = 0;

let temp = 0;

// Temporary variables for serial reading/writing
let real_odd = 0;
let real_even = 0;
let img_even = 0;
let img_odd = 0;

let odd = 0;

while (span == 0) {
  while (odd < 32) {
    if (odd >= span) {
      odd := odd | span;
      even := odd ^ span;
      real_even := real[even];
      ---
      real_odd  := real[odd];
      ---
      temp := real_even + real_odd
      ---
      real[odd] := real_even - real_odd;
      ---
      real[even] := temp;
      ---
      img_even := img[even];
      ---
      img_odd := img[odd];
      ---
      temp := img_even + img_odd;
      ---
      img[odd] := img_even - img_odd;
      ---
      img[even] := temp;
      ---
      rootindex := (even << log) & (32 - 1);
      ---
      if (rootindex != 0) {
        temp := real_twid[rootindex] * real[odd] - img_twid[rootindex] * img[odd];
        ---
        img_odd := img[odd];
        ---
        img[odd] := real_twid[rootindex] * img_odd + img_twid[rootindex] * real[odd];
        ---
        real[odd] := temp;
      };
    odd := odd + 1;
    };
  span := span >> 1;
  log := log + 1;
}

